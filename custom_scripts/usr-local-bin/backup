#!/bin/bash

# linux backup script called from croncall...

# script variables
# exported variables and environment variables can be substited in list files
e=`date +%s`
logRoot=/tmp/backup.log
log="$logRoot.$e"
#log=/dev/stdout
script_alias=${1:-daily}
export disk="/"
default="/mnt/backup"
export mnt=${2:-$default}
# optionally specify disk and mount
if [ $mnt != $default ]; then
  export disk=$mnt
  export mnt=${3:-$default}
fi
export backup="$mnt/$HOSTNAME"
export day=`date +%A`
export mday=`date +%d`
export week=$((10#`date +%W` % 4))
export month=`date +%B`
export year=`date +%Y`
if [[ $((10#`date +%W` % 2)) -eq 0 ]];
  then export wk="even";
  else export wk="odd";
fi
if [[ $((10#`date +%m` % 2)) -eq 0 ]];
  then export mon="even";
  else export mon="odd";
fi

# find backup lists...
aliases=`(cd /usr/local/bin && ls -1 backup.lst.*) | sed -e 's/backup.lst.//'`
if [[ $aliases =~ $script_alias ]]; then
  script="/usr/local/bin/backup.lst.$script_alias"
else
  script=$script_alias
  script_alias=$(basename $script_alias)
fi
case $script_alias in
  "daily" )   descriptor=$day;;
  "weekly" )  descriptor=$wk;;
  "monthly" ) descriptor=$mon;;
  * )         descriptor="other"
esac
export descriptor

echo "### [$HOSTNAME] BACKUP BEGUN: `date`" >> $log 2>&1
echo "# SCRIPT: $script_alias ($script)" >> $log 2>&1
echo "# DATE:   Week $week [$wk] - $day, $mday $month [$mon] $year" >> $log 2>&1
echo  >> $log 2>&1

# report disk status...
echo "PRE-RUN disk status..." >> $log 2>&1
#du -s /tmp /var /usr /mnt /opt >> $log 2>/dev/null
du -hxd1 / >> $log 2>/dev/null
df -h --total -x tmpfs -x devtmpfs >> $log 2>/dev/null
echo "" >> $log 2>&1

# handle mounting of backup drive...
mounted=0
try=6
n=0

if [ $mnt = $default ]; then
  # assume using an existing locally mounted drive.
  mounted=-1
fi

echo "# DRIVE: $disk" >> $log 2>&1
echo "# MOUNT: $mnt" >> $log 2>&1

# if offline drive, mount it first
if [ $mounted -eq 0 ]; then
  while [ $n -lt $try ];
    do
      #mount backup drive
      mount -t ext4 $disk $mnt >> $log 2>&1
      sleep 1
      if ! grep -qs "$mnt" /etc/mtab
      then
        # failed to mount, retry
        (( n = $n + 1 ))
        #echo "###   BACKUP DRIVE[$disk] failed to mount on attempt $n."
        echo "###   BACKUP DRIVE[$disk] failed to mount on attempt $n." >> $log 2>&1
        sleep 9
      else
        #echo "###   BACKUP DRIVE[$disk] mounted."
        echo "###   BACKUP DRIVE[$disk] mounted." >> $log 2>&1
        sleep 1
        ls -l $mnt >> $log 2>&1
        (( n=$try ))
        mounted=1
        fi
    done
  fi


if [ $mounted -eq 0 ]; then
  echo "### BACKUP DRIVE[$disk] NOT READY: BACKUP ABORTED!" >> $log 2>&1
else
  echo "###   BACKUP DRIVE[$disk] ready as $mnt." >> $log 2>&1
  df $mnt >> $log 2>&1
  # $script contains list of specific backup operations

  while read line;
    do
      # ignore comments lines...
      line=`echo "$line" | sed "s/[ ^I]*#.*//"`
      if [ -z "$line" ]; then continue; fi
      # variable substitutions...
      line=`echo "$line" | envsubst`
      if ! [[ $line =~ "echo" ]]; then
        echo "EXECUTING '$line' ..." >> $log 2>&1
        fi
        `$line >> $log 2>&1`
      printf "\n\n" >> $log 2>&1
    done < $script

  fi


e2=`date +%s`
echo "### BACKUP completed $d2" >> $log 2>&1
elapsed=`expr $e2 - $e`

echo "### ELAPSED TIME: $(date -d "1970-01-01 $elapsed sec" +%H:%M:%S)" >> $log 2>&1

#  save log....
cp $log $mnt/$script_alias.log

# unmount offline backup area...
if [ $mounted -eq 1 ]; then
  # umount drive
  ls -l $mnt >> $log 2>&1
  sleep 2
  umount $mnt >> $log 2>&1
  mx=`mount | grep "$mnt" | awk 'NR==1{print $1}'`
  if [[ ! -z $mx ]]; then
    echo "ERROR: $mnt ($mx) FAILED TO UNMOUNT!" >> $log 2>&1
  else
    echo "### UMOUNTED DRIVE $disk" >> $log 2>&1
  fi
fi
#cleanup tmp files
find $logRoot* -mtime +30 | 2>/dev/null xargs -r rm -- >> $log 2>&1

# report log...
cp $log $logRoot
subj=`echo "SERVER[$HOSTNAME]: $descriptor $script_alias BACKUP" | tr a-z A-Z`
cat $log | /usr/local/bin/mailto.py "$subj"
